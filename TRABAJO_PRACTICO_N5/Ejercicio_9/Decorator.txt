##DECORATOR

Decorator es un patrón de diseño estructural que te permite añadir funcionalidades a 
objetos colocando estos objetos dentro de objetos encapsuladores especiales 
que contienen estas funcionalidades.


##EJEMPLO DE LA VIDA REAL:
Vestir ropa es un ejemplo del uso de decoradores. Cuando tienes frío, te cubres con un suéter. 
Si sigues teniendo frío a pesar del suéter, puedes ponerte una chaqueta encima. Si está lloviendo, 
puedes ponerte un impermeable. Todas estas prendas “extienden” tu comportamiento básico pero no son
parte de ti, y puedes quitarte fácilmente cualquier prenda cuando lo desees.

##ESTRUCTURA 
1_ El Componente declara la interfaz común tanto para wrappers como para objetos envueltos.

2_ Componente Concreto es una clase de objetos envueltos. Define el comportamiento básico, 
que los decoradores pueden alterar.

3_ La clase Decoradora Base tiene un campo para referenciar un objeto envuelto. 
El tipo del campo debe declararse como la interfaz del componente para que pueda 
contener tanto los componentes concretos como los decoradores. 
La clase decoradora base delega todas las operaciones al objeto envuelto.

4_ Los Decoradores Concretos definen funcionalidades adicionales que se pueden añadir 
dinámicamente a los componentes. Los decoradores concretos sobrescriben métodos de la 
clase decoradora base y ejecutan su comportamiento, ya sea antes o después de invocar 
al método padre.

5_ El Cliente puede envolver componentes en varias capas de decoradores, siempre y 
cuando trabajen con todos los objetos a través de la interfaz del componente.