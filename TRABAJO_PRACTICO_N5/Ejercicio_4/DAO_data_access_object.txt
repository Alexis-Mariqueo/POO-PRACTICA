##DAO (Data Access Object)

El patrón Data Access Object (DAO) es un patrón de diseño utilizado para separar la lógica 
de acceso a datos de la lógica de negocio. Proporciona una abstracción sobre la fuente de datos, 
lo que permite que el resto de la aplicación interactúe con la base de datos a través de una 
interfaz bien definida. Esto facilita el mantenimiento y permite cambiar la implementación 
del acceso a los datos (por ejemplo, cambiar de MySQL a PostgreSQL) sin modificar la lógica de negocio.

Pasos:
1.Entidades: Las entidades de negocio son representaciones de los datos en la base de datos. 
Estas son clases con atributos que representan las columnas de una tabla.
2.DAO: Cada entidad tiene una clase DAO asociada que contiene los métodos para realizar 
las operaciones CRUD en la base de datos.
3.Conexión a la base de datos: Usamos un patrón Singleton para gestionar la conexión a la base de datos.

______________________________________________________________________________________________________________
##PATRON DAO (Data Access Object)

El patrón DAO propone separar por completo la lógica de negocio de la lógica para acceder a los datos, 
de esta forma, el DAO proporcionará los métodos necesarios para insertar, actualizar, borrar y consultar 
la información; por otra parte, la capa de negocio solo se preocupa por lógica de negocio y utiliza 
el DAO para interactuar con la fuente de datos.

##COMPONENTES
##Ver imagen UML-CLASES

Los compones que conforman el patrón son:

__BusinessObject: representa un objeto con la lógica de negocio.

__DataAccessObject: representa una capa de acceso a datos que oculta la fuente y 
los detalles técnicos para recuperar los datos.

__TransferObject: este es un objeto plano que implementa el patrón Data Transfer Object (DTO), 
el cual sirve para transmitir la información entre el DAO y el Business Service.
###################################################################
-----------------------------------------------------------------------------------------
Solo lectura: Dado que el objetivo de un DTO es utilizarlo como un objeto de transferencia 
entre el cliente y el servidor, es importante evitar tener operaciones de negocio o 
métodos que realicen cálculos sobre los datos, es por ello que solo deberemos de tener 
los métodos GET y SET de los respectivos atributos del DTO.
-----------------------------------------------------------------------------------------
Serializable: Es claro que, si los objetos tendrán que viajar por la red, 
deberán de poder ser serializables, pero no hablamos solamente de la clase en sí, 
sino que también todos los atributos que contenga el DTO deberán ser fácilmente serializables. 
Un error clásico en Java es, por ejemplo, crear atributos de tipo Date o Calendar para transmitir 
la fecha u hora, ya que estos no tienen una forma estándar para serializarse 
por ejemplo en Webservices o REST.
-----------------------------------------------------------------------------------------
###################################################################


__DataSource: representa de forma abstracta la fuente de datos, la cual puede ser una base de datos, 
Webservices, LDAP, archivos de texto, etc.

## COMO FUNCIONA EL PATRON DAO (Data Access Object)
##Ver imagen UML-SEQUENCE
El diagrama se interpreta de la siguiente manera:

1_ El BusinessObject creo u obtiene una referencia al DataAccessObject.
2_ El BusinessObject solicita información al DataAccessObject
    - El DataAccessObject solicita la información al DataSource
    - El DataAccessObject crea una instancia del TransferObject con los datos recuperados del DataSource
    - El DataAccessObject response con el TransferObject creado en los pasos anteriores.
3_ El BusinessObject actualiza algún valor del TransferObject
   Más actualizaciones
4_ El BusinessObject solicita el guardado de los datos actualizados al DataAccessObject.
    El DataAccessObject guarda los datos en el DataSource.